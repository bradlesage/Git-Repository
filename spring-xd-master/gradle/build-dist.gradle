/*
 * Tasks related to building the Spring XD distribution
*/
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
def dirtJars = []
def loadDirtJars = {
	if (dirtJars.size == 0) {
		File dirtLib = new File("$rootDir/spring-xd-dirt/build/install/spring-xd-dirt/lib")
		dirtLib.traverse { jar -> dirtJars << jar.name }
	}
	dirtJars
}

task copyRedisInstall(type: Copy, dependsOn: ":redis:bundleRedis") {
	from "$rootDir/redis/build"
	into "$buildDir/dist/spring-xd/redis"
}

task copyGemfireInstall(type: Copy, dependsOn: [":spring-xd-gemfire-server:installApp", "copyXDInstall"]) {
	from "$rootDir/spring-xd-gemfire-server/build/install/spring-xd-gemfire-server"
	into "$buildDir/dist/spring-xd/gemfire"
	//exclude any jars already in xd/lib
	exclude {jar ->
		loadDirtJars()
		dirtJars.contains(jar.name)
	}
}

task copyBatchInstall(type: Copy, dependsOn: [":spring-xd-batch:installApp", "copyXDInstall"]) {
	from "$rootDir/spring-xd-batch/build/install/spring-xd-batch"
	into "$buildDir/dist/spring-xd/hsqldb"
	//exclude any jars already in xd/lib
	exclude {jar ->
		loadDirtJars()
		dirtJars.contains(jar.name)
	}
}

task copyPythonInstall(type: Copy) {
	from "$rootDir/spring-xd-python"
	into "$buildDir/dist/spring-xd/python"
	exclude "**/*.pyc"
}

import org.apache.tools.ant.filters.ReplaceTokens

task copyZookeeperInstall(type: Copy) {
	from "$rootDir/scripts/zookeeper"
	into "$buildDir/dist/spring-xd/zookeeper"
	filter(ReplaceTokens, tokens: [zookeeperVersion: rootProject.ext.zookeeperVersion])
}

task copyXDInstall(type: Copy, dependsOn: [":spring-xd-dirt:build", ":spring-xd-dirt:installApp"]) {
	def versions = [:]
	def file = rootProject.file('dependencies.properties')
		file.withReader { reader ->
			def properties = new Properties()
			properties.load(reader)
			versions << properties
		}
	def protobufVersion = versions["com.google.protobuf:protobuf-java"]
	from "$rootDir/spring-xd-dirt/build/install/spring-xd-dirt"
	into "$buildDir/dist/spring-xd/xd"
	exclude "**/lib/hadoop-*.jar"
	// to include protobuf-java-*-spark.jar following change is necessary.
	exclude "**/lib/protobuf-java-"+ protobufVersion +".jar"
	exclude "**/commons-logging*.jar"
	exclude "**/lib/spring-data-hadoop-*.jar"
	exclude "**/lib/mysql-connector-java-*.jar"
}

task copyXDShellInstall(type: Copy, dependsOn: ["copyXDInstall", ":spring-xd-shell:installApp"]) {
	from "$rootDir/spring-xd-shell/build/install/spring-xd-shell"
	into "$buildDir/dist/spring-xd/shell"
	exclude "**/lib/hadoop-*.jar"
	exclude "**/lib/protobuf-java-*.jar"
	exclude "**/lib/spring-data-hadoop-*.jar"
	//exclude any jars already in xd/lib
	exclude {jar ->
		loadDirtJars()
		dirtJars.contains(jar.name)
	}
}

task copyHadoopLibs {}

def hadoopDistros = [
	'hadoop26',
	'cdh5',
	'hdp22',
	'phd21',
	'phd30'
]

hadoopDistros.each { distro ->
	tasks.create(name: "copyHadoopLibs-$distro", type: Copy) {
		from project(":spring-xd-hadoop:$distro").copyToLib.outputs.files
		into "$buildDir/dist/spring-xd/xd/lib/$distro"
	}
	copyHadoopLibs.dependsOn(tasks["copyHadoopLibs-$distro"])
}

task copyMessageBusLibs(type: Copy) {
	from "$rootDir/lib/messagebus"
	into "$buildDir/dist/spring-xd/xd/lib/messagebus"
}

task copyYarnInstallDirt(type: Copy, dependsOn: [":spring-xd-dirt:build", ":spring-xd-dirt:installApp", ":spring-xd-yarn:spring-xd-yarn-client:build", ":spring-xd-yarn:spring-xd-yarn-appmaster:build"]) {
		group = 'Application'
	from "$rootDir/spring-xd-dirt/build/install/spring-xd-dirt"
	into "$buildDir/dist/spring-xd-yarn/xd-yarn"
	exclude "**/bin/*"
	exclude "**/config/servers.yml"
	exclude "**/config/xd-*-logger.groovy"
	exclude "**/config/modules"
	exclude "**/lib/hadoop-*.jar"
	exclude "**/lib/spring-data-hadoop-*.jar"
	exclude "**/lib/slf4j-log4j12-*.jar"
	exclude "**/lib/log4j-*.jar"
	exclude "**/lib/logback-*.jar"
}

task copyYarnInstallMessageBusLibs(type: Copy, dependsOn: ["copyYarnInstallDirt"]) {
  from "$rootDir/lib/messagebus"
  into "$buildDir/dist/spring-xd-yarn/xd-yarn/lib/messagebus"
}

task copyInstall (type: Copy, dependsOn: ["build",
										  "copyRedisInstall",
										  "copyXDInstall",
										  "copyGemfireInstall",
										  "copyBatchInstall",
										  "copyHadoopLibs",
										  "copyXDShellInstall",
										  "copyYarnInstallDirt",
										  "copyYarnInstallMessageBusLibs",
										  "copyZookeeperInstall",
										  "copyPythonInstall",
										  "copyMessageBusLibs"]) {
	group = 'Application'
	description = "Copy all the required installs to build/dist directory"
	from "$rootDir/scripts/README"
	from "$rootDir/scripts/LICENSE"
	into "$buildDir/dist/spring-xd"
}

configurations { dist }

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing api and reference docs."

	from (api) { into 'api' }

	from (reference) {
		exclude 'htmlsingle'
		exclude 'html'
		into 'reference'
	}

	from ("$buildDir/html") { into "reference/html" }
}

task distZip(type: Zip, dependsOn: [asciidoctor, copyInstall], overwrite: true) {
	group = 'Application'
	classifier = 'dist'
	description = "Bundles the XD project and associated installs with libs and OS specific scripts as a zip file."

	ext.baseDir = "${project.name}-${project.version}";

	from("$buildDir/dist/spring-xd") { into "${baseDir}" }

	from ("$buildDir/html") { into "${baseDir}/docs" }
}

task distTar(type: Tar, dependsOn: [asciidoctor, copyInstall], overwrite: true) {
	group = 'Application'
	classifier = ''
	description = "Bundles the XD project and associated installs with libs and OS specific scripts as a tar file."

	ext.baseDir = "${project.name}-${project.version}";

	from("$buildDir/dist/spring-xd") { into "${baseDir}" }

	from ("$buildDir/html") { into "${baseDir}/docs" }
}

task distShellZip(type: Zip, dependsOn: [copyInstall], overwrite: true) {
        group = 'Application'
        classifier = 'shell'
        description = "Bundles the XD Shell as a zip file."
        archiveName = "${project.name}-${project.version}-shell.zip" 
        
        ext.baseDir = "${project.name}-${project.version}-shell";

        from("$buildDir/dist/spring-xd/shell") {
            into "${baseDir}"
        }
        from("$buildDir/dist/spring-xd/xd/lib") {
            into "${baseDir}/lib"
            include "*.jar"
        }
        from("$rootDir/spring-xd-shell/build/install/spring-xd-shell/lib") {
            into "${baseDir}/lib"
            include "spring-data-hadoop-*.jar"
        }
        // copy hadoop distro jars
        [
                'hadoop26',
                'cdh5',
                'hdp22',
                'phd21',
                'phd30'
        ].each { distro ->
                        from("$buildDir/dist/spring-xd/xd/lib/$distro") {
                            include "hadoop-auth-*.jar"
                            include "hadoop-common-*.jar"
                            include "hadoop-hdfs-*.jar"
                            include "hadoop-mapreduce-client-core-*.jar"
                            include "protobuf-java-*.jar"
                            into "${baseDir}/lib/$distro/"
                }
        }
}

task yarnZip(type: Zip, dependsOn: [copyInstall], overwrite: true) {
	group = 'Application'
	appendix = 'yarn'
	description = "Bundles the XD project, modules and libs prepared for YARN deployment as a zip file."

	destinationDir = new File("$buildDir/tmp")

	from("$buildDir/dist/spring-xd-yarn/xd-yarn/lib") {
		into "/lib"
	}
	from("$buildDir/dist/spring-xd/xd/lib/hadoop26") {
		include "spring-data-hadoop-*.jar"
		into "/lib"
	}
	from("$buildDir/dist/spring-xd-yarn/xd-yarn/config") {
		into "/config"
	}
	from("$buildDir/dist/spring-xd-yarn/xd-yarn/modules") {
		into "/modules"
	}
	from("$buildDir/dist/spring-xd-yarn/xd-yarn/spring-xd-ui") {
		into "/spring-xd-ui"
	}
}

task yarnModulesZip(type: Zip, overwrite: true) {
	group = 'Application'
	archiveName = "custom-modules.zip"
	description = "Creates an empty custom-modules zip file."

	destinationDir = new File("$buildDir/tmp")

	from("$rootDir/spring-xd-yarn/site/modules") {
		into "/modules"
	}
}

task yarnConfigZip(type: Zip, overwrite: true) {
	group = 'Application'
	archiveName = "modules-config.zip"
	description = "Creates the modules config zip file."

	destinationDir = new File("$buildDir/tmp")

	from("$rootDir/spring-xd-dirt/build/install/spring-xd-dirt/config/modules") {
		into "/"
	}
}


task distYarnZip(type: Zip, dependsOn: [copyInstall, yarnZip, yarnModulesZip, yarnConfigZip], overwrite: true) {
	group = 'Application'
	classifier = 'yarn'
	description = "Bundles the XD files needed for YARN deployments."

	ext.baseDir = "${project.name}-${project.version}-yarn";

	from("$rootDir/scripts/README") {
		into "${baseDir}"
	}
	from("$rootDir/scripts/LICENSE") {
		into "${baseDir}"
	}
	from("$rootDir/spring-xd-yarn/site/scripts") {
		into "${baseDir}/bin"
	}
	from("$rootDir/spring-xd-yarn/site/config") {
		include '*.properties'
		include '*.yml'
		include '*.txt'
		into "${baseDir}/config"
	}
	from("$buildDir/dist/spring-xd/xd/config/modules") {
		include "modules.yml"
		into "${baseDir}/config"
	}
	from("$buildDir/tmp") {
		include "modules-config.zip"
		into "${baseDir}/config"
	}
	from("$rootDir/spring-xd-yarn/spring-xd-yarn-client/build/libs") {
		include "spring-xd-yarn-client-${project.version}.jar"
		into "${baseDir}/lib"
	}
	from("$rootDir/spring-xd-yarn/spring-xd-yarn-appmaster/build/libs") {
		include "spring-xd-yarn-appmaster-${project.version}.jar"
		into "${baseDir}/lib"
	}
	from("$buildDir/tmp") {
		include "spring-xd-yarn-${project.version}.zip"
		include "custom-modules.zip"
		into "${baseDir}"
	}
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds XD binary and reference docs distribution archives.'
	artifacts {
		archives distZip
		archives distYarnZip
		archives docsZip
		archives distShellZip
	}
}

def excludedMavenProjects = hadoopDistros << 'documentation-toolchain' << rootProject.name

artifactory {
	contextUrl = 'http://repo.spring.io'
	publish {
		repository {
			repoKey = 'libs-snapshot-local' // The Artifactory repository key to publish to
			//username = 
			//password = 
		}
		defaults {
			// Reference to Gradle publications defined in the build script.
			// This is how we tell the Artifactory Plugin which artifacts should be
			// published to Artifactory.
			if (!excludedMavenProjects.contains(project.name)) {
				publications('mavenCustom')
				publishArtifacts = true
				properties {
					archives '*:*:*:*@zip', 'zip.name':'spring-xd', 'zip.displayname':'Spring XD', 'zip.deployed':false
					archives '*:*:*:docs@zip', 'zip.type':'docs'
					archives '*:*:*:dist@zip', 'zip.type':'dist'
				}
			}
		}
	}
	resolve {
		repoKey = 'libs-snapshot'
	}
}

publishing {
	publications {
		archives(MavenPublication) {
			artifact distZip
			artifact distYarnZip
			artifact docsZip
			artifact distShellZip
		}
	}
}

artifactoryPublish {
	publications('archives')
	publishArtifacts = true
	publishPom = false
	properties {
		archives '*:*:*:*@zip', 'zip.name':'spring-xd', 'zip.displayname':'Spring XD', 'zip.deployed':false
		archives '*:*:*:docs@zip', 'zip.type':'docs'
		archives '*:*:*:dist@zip', 'zip.type':'dist'
	}
}
