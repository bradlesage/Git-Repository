[[shell-command-reference]]
== XD Shell Command Reference
Below is a reference list of all Spring XD specific commands you can use in the link:Shell#interactive-shell[XD Shell].

=== Configuration Commands
==== $$admin config info$$
$$Show the XD admin server being used$$.

    admin config info


==== $$admin config server$$
$$Configure the XD admin server to use$$.

    admin config server [[--uri] <uri>] [--username <username>] [--password [<password>]]

*$$uri$$*:: $$the location of the XD Admin REST endpoint$$. *(default: `http://localhost:9393/`)*
*$$username$$*:: $$the username for authenticated access to the Admin REST endpoint$$. *(default: ``)*
*$$password$$*:: $$the password for authenticated access to the Admin REST endpoint (valid only with a username)$$.

==== $$admin config timezone list$$
$$List all timezones$$.

    admin config timezone list


==== $$admin config timezone set$$
$$Set the timezone of the Spring XD Shell (Not persisted)$$.

    admin config timezone set [--timeZone] <timeZone>

*$$timeZone$$*:: $$the id of the timezone, You can obtain a list of timezone ids using 'admin config timezone list', If an invalid timezone id is provided, then 'Greenwich Mean Time' is being used$$. *(required)*


=== Runtime Commands
==== $$runtime containers$$
$$List runtime containers$$.

    runtime containers


==== $$runtime modules$$
$$List runtime modules$$.

    runtime modules [--containerId <containerId>] [--moduleId <moduleId>]

*$$containerId$$*:: $$to filter by container id$$.
*$$moduleId$$*:: $$to filter by module id$$.


=== Stream Commands
==== $$stream all destroy$$
$$Destroy all existing streams$$.

    stream all destroy [--force [<force>]]

*$$force$$*:: $$bypass confirmation prompt$$. *(default: `false`, or `true` if +--force+ is specified without a value)*

==== $$stream all undeploy$$
$$Un-deploy all previously deployed stream$$.

    stream all undeploy [--force [<force>]]

*$$force$$*:: $$bypass confirmation prompt$$. *(default: `false`, or `true` if +--force+ is specified without a value)*

==== $$stream create$$
$$Create a new stream definition$$.

    stream create [--name] <name> --definition <definition> [--deploy [<deploy>]]

*$$name$$*:: $$the name to give to the stream$$. *(required)*
*$$definition$$*:: $$a stream definition, using XD DSL (e.g. "http --port=9000 | hdfs")$$. *(required)*
*$$deploy$$*:: $$whether to deploy the stream immediately$$. *(default: `false`, or `true` if +--deploy+ is specified without a value)*

==== $$stream deploy$$
$$Deploy a previously created stream$$.

    stream deploy [--name] <name> [--properties <properties>] [--propertiesFile <propertiesFile>]

*$$name$$*:: $$the name of the stream to deploy$$. *(required)*
*$$properties$$*:: $$the properties for this deployment$$.
*$$propertiesFile$$*:: $$the properties for this deployment (as a File)$$.

==== $$stream destroy$$
$$Destroy an existing stream$$.

    stream destroy [--name] <name>

*$$name$$*:: $$the name of the stream to destroy$$. *(required)*

==== $$stream list$$
$$List created streams$$.

    stream list


==== $$stream undeploy$$
$$Un-deploy a previously deployed stream$$.

    stream undeploy [--name] <name>

*$$name$$*:: $$the name of the stream to un-deploy$$. *(required)*


=== Job Commands
==== $$job all destroy$$
$$Destroy all existing jobs$$.

    job all destroy [--force [<force>]]

*$$force$$*:: $$bypass confirmation prompt$$. *(default: `false`, or `true` if +--force+ is specified without a value)*

==== $$job all undeploy$$
$$Un-deploy all existing jobs$$.

    job all undeploy [--force [<force>]]

*$$force$$*:: $$bypass confirmation prompt$$. *(default: `false`, or `true` if +--force+ is specified without a value)*

==== $$job create$$
$$Create a job$$.

    job create [--name] <name> --definition <definition> [--deploy [<deploy>]]

*$$name$$*:: $$the name to give to the job$$. *(required)*
*$$definition$$*:: $$job definition using xd dsl $$. *(required)*
*$$deploy$$*:: $$whether to deploy the job immediately$$. *(default: `false`, or `true` if +--deploy+ is specified without a value)*

==== $$job deploy$$
$$Deploy a previously created job$$.

    job deploy [--name] <name> [--properties <properties>] [--propertiesFile <propertiesFile>]

*$$name$$*:: $$the name of the job to deploy$$. *(required)*
*$$properties$$*:: $$the properties for this deployment$$.
*$$propertiesFile$$*:: $$the properties for this deployment (as a File)$$.

==== $$job destroy$$
$$Destroy an existing job$$.

    job destroy [--name] <name>

*$$name$$*:: $$the name of the job to destroy$$. *(required)*

==== $$job execution all stop$$
$$Stop all the job executions that are running$$.

    job execution all stop [--force [<force>]]

*$$force$$*:: $$bypass confirmation prompt$$. *(default: `false`, or `true` if +--force+ is specified without a value)*

==== $$job execution display$$
$$Display the details of a Job Execution$$.

    job execution display [--id] <id>

*$$id$$*:: $$the id of the job execution$$. *(required)*

==== $$job execution list$$
$$List all job executions$$.

    job execution list


==== $$job execution restart$$
$$Restart a job that failed or interrupted previously$$.

    job execution restart [--id] <id>

*$$id$$*:: $$the id of the job execution that failed or interrupted$$. *(required)*

==== $$job execution step display$$
$$Display the details of a Step Execution$$.

    job execution step display [--id] <id> --jobExecutionId <jobExecutionId>

*$$id$$*:: $$the id of the step execution$$. *(required)*
*$$jobExecutionId$$*:: $$the job execution id$$. *(required)*

==== $$job execution step list$$
$$List all step executions for the provided job execution id$$.

    job execution step list [--id] <id>

*$$id$$*:: $$the id of the job execution$$. *(required)*

==== $$job execution step progress$$
$$Get the progress info for the given step execution$$.

    job execution step progress [--id] <id> --jobExecutionId <jobExecutionId>

*$$id$$*:: $$the id of the step execution$$. *(required)*
*$$jobExecutionId$$*:: $$the job execution id$$. *(required)*

==== $$job execution stop$$
$$Stop a job execution that is running$$.

    job execution stop [--id] <id>

*$$id$$*:: $$the id of the job execution$$. *(required)*

==== $$job instance display$$
$$Display information about a given job instance$$.

    job instance display [[--id] <id>]

*$$id$$*:: $$the id of the job instance to retrieve$$.

==== $$job launch$$
$$Launch previously deployed job$$.

    job launch [[--name] <name>] [--params <params>]

*$$name$$*:: $$the name of the job to deploy$$.
*$$params$$*:: $$the parameters for the job$$. *(default: ``)*

==== $$job list$$
$$List all jobs$$.

    job list


==== $$job undeploy$$
$$Un-deploy an existing job$$.

    job undeploy [--name] <name>

*$$name$$*:: $$the name of the job to un-deploy$$. *(required)*


=== Module Commands
==== $$module compose$$
$$Create a virtual module$$.

    module compose [--name] <name> --definition <definition> [--force [<force>]]

*$$name$$*:: $$the name to give to the module$$. *(required)*
*$$definition$$*:: $$module definition using xd dsl$$. *(required)*
*$$force$$*:: $$force update if module already exists (only if not in use)$$. *(default: `false`, or `true` if +--force+ is specified without a value)*

==== $$module delete$$
$$Delete a virtual module$$.

    module delete [--name] <name>

*$$name$$*:: $$name of the module to delete, in the form 'type:name'$$. *(required)*

==== $$module info$$
$$Get information about a module$$.

    module info [--name] <name> [--hidden [<hidden>]]

*$$name$$*:: $$name of the module to query, in the form 'type:name'$$. *(required)*
*$$hidden$$*:: $$whether to show 'hidden' options$$. *(default: `false`, or `true` if +--hidden+ is specified without a value)*

==== $$module list$$
$$List all modules$$.

    module list


==== $$module upload$$
$$Upload a new module$$.

    module upload --type <type> --name <name> [--file] <file> [--force [<force>]]

*$$type$$*:: $$the type for the uploaded module$$. *(required)*
*$$name$$*:: $$the name for the uploaded module$$. *(required)*
*$$file$$*:: $$path to the module archive$$. *(required)*
*$$force$$*:: $$force update if module already exists (only if not in use)$$. *(default: `false`, or `true` if +--force+ is specified without a value)*


=== Metrics Commands
==== $$counter delete$$
$$Delete the counter with the given name$$.

    counter delete [--name] <name>

*$$name$$*:: $$the name of the counter to delete$$. *(required)*

==== $$counter display$$
$$Display the value of a counter$$.

    counter display [--name] <name> [--pattern <pattern>]

*$$name$$*:: $$the name of the counter to display$$. *(required)*
*$$pattern$$*:: $$the pattern used to format the value (see DecimalFormat)$$. *(default: `<use platform locale>`)*

==== $$counter list$$
$$List all available counter names$$.

    counter list



==== $$field-value-counter delete$$
$$Delete the field-value-counter with the given name$$.

    field-value-counter delete [--name] <name>

*$$name$$*:: $$the name of the field-value-counter to delete$$. *(required)*

==== $$field-value-counter display$$
$$Display the value of a field-value-counter$$.

    field-value-counter display [--name] <name> [--pattern <pattern>] [--size <size>]

*$$name$$*:: $$the name of the field-value-counter to display$$. *(required)*
*$$pattern$$*:: $$the pattern used to format the field-value-counter's field count (see DecimalFormat)$$. *(default: `<use platform locale>`)*
*$$size$$*:: $$the number of values to display$$. *(default: `25`)*

==== $$field-value-counter list$$
$$List all available field-value-counter names$$.

    field-value-counter list



==== $$aggregate-counter delete$$
$$Delete an aggregate counter$$.

    aggregate-counter delete [--name] <name>

*$$name$$*:: $$the name of the aggregate counter to delete$$. *(required)*

==== $$aggregate-counter display$$
$$Display aggregate counter values by chosen interval and resolution(minute, hour)$$.

    aggregate-counter display [--name] <name> [--from <from>] [--to <to>] [--lastHours <lastHours>] [--lastDays <lastDays>] [--resolution <resolution>] [--pattern <pattern>]

*$$name$$*:: $$the name of the aggregate counter to display$$. *(required)*
*$$from$$*:: $$start-time for the interval. format: 'yyyy-MM-dd HH:mm:ss'$$.
*$$to$$*:: $$end-time for the interval. format: 'yyyy-MM-dd HH:mm:ss'. defaults to now$$.
*$$lastHours$$*:: $$set the interval to last 'n' hours$$.
*$$lastDays$$*:: $$set the interval to last 'n' days$$.
*$$resolution$$*:: $$the size of the bucket to aggregate (minute, hour, day, month)$$. *(default: `hour`)*
*$$pattern$$*:: $$the pattern used to format the count values (see DecimalFormat)$$. *(default: `<use platform locale>`)*

==== $$aggregate-counter list$$
$$List all available aggregate counter names$$.

    aggregate-counter list



==== $$gauge delete$$
$$Delete a gauge$$.

    gauge delete [--name] <name>

*$$name$$*:: $$the name of the gauge to delete$$. *(required)*

==== $$gauge display$$
$$Display the value of a gauge$$.

    gauge display [--name] <name> [--pattern <pattern>]

*$$name$$*:: $$the name of the gauge to display$$. *(required)*
*$$pattern$$*:: $$the pattern used to format the value (see DecimalFormat)$$. *(default: `<use platform locale>`)*

==== $$gauge list$$
$$List all available gauge names$$.

    gauge list



==== $$rich-gauge delete$$
$$Delete the richgauge$$.

    rich-gauge delete [--name] <name>

*$$name$$*:: $$the name of the richgauge to delete$$. *(required)*

==== $$rich-gauge display$$
$$Display Rich Gauge value$$.

    rich-gauge display [--name] <name> [--pattern <pattern>]

*$$name$$*:: $$the name of the richgauge to display value$$. *(required)*
*$$pattern$$*:: $$the pattern used to format the richgauge value (see DecimalFormat)$$. *(default: `<use platform locale>`)*

==== $$rich-gauge list$$
$$List all available richgauge names$$.

    rich-gauge list



=== Http Commands
==== $$http get$$
$$Make GET request to http endpoint$$.

    http get [[--target] <target>]

*$$target$$*:: $$the URL to make the request to$$. *(default: `http://localhost:9393`)*

==== $$http post$$
$$POST data to http endpoint$$.

    http post [[--target] <target>] [--data <data>] [--file <file>] [--contentType <contentType>]

*$$target$$*:: $$the location to post to$$. *(default: `http://localhost:9000`)*
*$$data$$*:: $$the text payload to post. exclusive with file. embedded double quotes are not supported if next to a space character$$.
*$$file$$*:: $$filename to read data from. exclusive with data$$.
*$$contentType$$*:: $$the content-type to use. file is also read using the specified charset$$. *(default: `text/plain; Charset=UTF-8`)*


=== Hadoop Configuration Commands
==== $$hadoop config fs$$
$$Sets the Hadoop namenode$$.

    hadoop config fs [--namenode] <namenode>

*$$namenode$$*:: $$namenode URL - can be file:///|hdfs://<namenode>:<port>|webhdfs://<namenode>:<port>$$. *(required)*

==== $$hadoop config info$$
$$Returns basic info about the Hadoop configuration$$.

    hadoop config info


==== $$hadoop config load$$
$$Loads the Hadoop configuration from the given resource$$.

    hadoop config load [--location] <location>

*$$location$$*:: $$configuration location (can be a URL)$$. *(required)*

==== $$hadoop config props get$$
$$Returns the value of the given Hadoop property$$.

    hadoop config props get [--key] <key>

*$$key$$*:: $$property name$$. *(required)*

==== $$hadoop config props list$$
$$Returns (all) the Hadoop properties$$.

    hadoop config props list


==== $$hadoop config props set$$
$$Sets the value for the given Hadoop property$$.

    hadoop config props set [--property] <property>

*$$property$$*:: $$what to set, in the form <name=value>$$. *(required)*


=== Hadoop FileSystem Commands
==== $$hadoop fs cat$$
$$Copy source paths to stdout$$.

    hadoop fs cat [--path] <path>

*$$path$$*:: $$file name to be shown$$. *(required)*

==== $$hadoop fs chgrp$$
$$Change group association of files$$.

    hadoop fs chgrp [--recursive [<recursive>]] --group <group> [--path] <path>

*$$recursive$$*:: $$whether with recursion$$. *(default: `false`, or `true` if +--recursive+ is specified without a value)*
*$$group$$*:: $$group name$$. *(required)*
*$$path$$*:: $$path of the file whose group will be changed$$. *(required)*

==== $$hadoop fs chmod$$
$$Change the permissions of files$$.

    hadoop fs chmod [--recursive [<recursive>]] --mode <mode> [--path] <path>

*$$recursive$$*:: $$whether with recursion$$. *(default: `false`, or `true` if +--recursive+ is specified without a value)*
*$$mode$$*:: $$permission mode$$. *(required)*
*$$path$$*:: $$path of the file whose permissions will be changed$$. *(required)*

==== $$hadoop fs chown$$
$$Change the owner of files$$.

    hadoop fs chown [--recursive [<recursive>]] --owner <owner> [--path] <path>

*$$recursive$$*:: $$whether with recursion$$. *(default: `false`, or `true` if +--recursive+ is specified without a value)*
*$$owner$$*:: $$owner name$$. *(required)*
*$$path$$*:: $$path of the file whose ownership will be changed$$. *(required)*

==== $$hadoop fs copyFromLocal$$
$$Copy single src, or multiple srcs from local file system to the destination file system. Same as put$$.

    hadoop fs copyFromLocal --from <from> --to <to>

*$$from$$*:: $$source file names$$. *(required)*
*$$to$$*:: $$destination path name$$. *(required)*

==== $$hadoop fs copyMergeToLocal$$
$$Takes a source directory and a destination file as input and concatenates files in src into the destination local file$$.

    hadoop fs copyMergeToLocal --from <from> --to <to> [--endline [<endline>]]

*$$from$$*:: $$source file names$$. *(required)*
*$$to$$*:: $$destination path name$$. *(required)*
*$$endline$$*:: $$whether add a newline character at the end of each file$$. *(default: `false`, or `true` if +--endline+ is specified without a value)*

==== $$hadoop fs copyToLocal$$
$$Copy files to the local file system. Same as get$$.

    hadoop fs copyToLocal --from <from> --to <to> [--ignoreCrc [<ignoreCrc>]] [--crc [<crc>]]

*$$from$$*:: $$source file names$$. *(required)*
*$$to$$*:: $$destination path name$$. *(required)*
*$$ignoreCrc$$*:: $$whether ignore CRC$$. *(default: `false`, or `true` if +--ignoreCrc+ is specified without a value)*
*$$crc$$*:: $$whether copy CRC$$. *(default: `false`, or `true` if +--crc+ is specified without a value)*

==== $$hadoop fs count$$
$$Count the number of directories, files, bytes, quota, and remaining quota$$.

    hadoop fs count [--quota [<quota>]] --path <path>

*$$quota$$*:: $$whether with quta information$$. *(default: `false`, or `true` if +--quota+ is specified without a value)*
*$$path$$*:: $$path name$$. *(required)*

==== $$hadoop fs cp$$
$$Copy files from source to destination. This command allows multiple sources as well in which case the destination must be a directory$$.

    hadoop fs cp --from <from> --to <to>

*$$from$$*:: $$source file names$$. *(required)*
*$$to$$*:: $$destination path name$$. *(required)*

==== $$hadoop fs du$$
$$Displays sizes of files and directories contained in the given directory or the length of a file in case its just a file$$.

    hadoop fs du [[--dir] <dir>] [--summary [<summary>]]

*$$dir$$*:: $$directory to be listed$$. *(default: `.`)*
*$$summary$$*:: $$whether with summary$$. *(default: `false`, or `true` if +--summary+ is specified without a value)*

==== $$hadoop fs expunge$$
$$Empty the trash$$.

    hadoop fs expunge


==== $$hadoop fs get$$
$$Copy files to the local file system$$.

    hadoop fs get --from <from> --to <to> [--ignoreCrc [<ignoreCrc>]] [--crc [<crc>]]

*$$from$$*:: $$source file names$$. *(required)*
*$$to$$*:: $$destination path name$$. *(required)*
*$$ignoreCrc$$*:: $$whether ignore CRC$$. *(default: `false`, or `true` if +--ignoreCrc+ is specified without a value)*
*$$crc$$*:: $$whether copy CRC$$. *(default: `false`, or `true` if +--crc+ is specified without a value)*

==== $$hadoop fs ls$$
$$List files in the directory$$.

    hadoop fs ls [[--dir] <dir>] [--recursive [<recursive>]]

*$$dir$$*:: $$directory to be listed$$. *(default: `.`)*
*$$recursive$$*:: $$whether with recursion$$. *(default: `false`, or `true` if +--recursive+ is specified without a value)*

==== $$hadoop fs mkdir$$
$$Create a new directory$$.

    hadoop fs mkdir [--dir] <dir>

*$$dir$$*:: $$directory name$$. *(required)*

==== $$hadoop fs moveFromLocal$$
$$Similar to put command, except that the source localsrc is deleted after it's copied$$.

    hadoop fs moveFromLocal --from <from> --to <to>

*$$from$$*:: $$source file names$$. *(required)*
*$$to$$*:: $$destination path name$$. *(required)*

==== $$hadoop fs mv$$
$$Move source files to destination in the HDFS$$.

    hadoop fs mv --from <from> --to <to>

*$$from$$*:: $$source file names$$. *(required)*
*$$to$$*:: $$destination path name$$. *(required)*

==== $$hadoop fs put$$
$$Copy single src, or multiple srcs from local file system to the destination file system$$.

    hadoop fs put --from <from> --to <to>

*$$from$$*:: $$source file names$$. *(required)*
*$$to$$*:: $$destination path name$$. *(required)*

==== $$hadoop fs rm$$
$$Remove files in the HDFS$$.

    hadoop fs rm [[--path] <path>] [--skipTrash [<skipTrash>]] [--recursive [<recursive>]]

*$$path$$*:: $$path to be deleted$$. *(default: `.`)*
*$$skipTrash$$*:: $$whether to skip trash$$. *(default: `false`, or `true` if +--skipTrash+ is specified without a value)*
*$$recursive$$*:: $$whether to recurse$$. *(default: `false`, or `true` if +--recursive+ is specified without a value)*

==== $$hadoop fs setrep$$
$$Change the replication factor of a file$$.

    hadoop fs setrep --path <path> --replica <replica> [--recursive [<recursive>]] [--waiting [<waiting>]]

*$$path$$*:: $$path name$$. *(required)*
*$$replica$$*:: $$source file names$$. *(required)*
*$$recursive$$*:: $$whether with recursion$$. *(default: `false`, or `true` if +--recursive+ is specified without a value)*
*$$waiting$$*:: $$whether wait for the replic number is eqal to the number$$. *(default: `false`, or `true` if +--waiting+ is specified without a value)*

==== $$hadoop fs tail$$
$$Display last kilobyte of the file to stdout$$.

    hadoop fs tail [--file] <file> [--follow [<follow>]]

*$$file$$*:: $$file to be tailed$$. *(required)*
*$$follow$$*:: $$whether show content while file grow$$. *(default: `false`, or `true` if +--follow+ is specified without a value)*

==== $$hadoop fs text$$
$$Take a source file and output the file in text format$$.

    hadoop fs text [--file] <file>

*$$file$$*:: $$file to be shown$$. *(required)*

==== $$hadoop fs touchz$$
$$Create a file of zero length$$.

    hadoop fs touchz [--file] <file>

*$$file$$*:: $$file to be touched$$. *(required)*


